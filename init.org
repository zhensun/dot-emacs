#+Title: Emacs Init.d Written in org-mode
#+Author: Zhen Sun
#+STARTUP: hidestars
#+STARTUP: indent

* The Beginning

This is my emacs's init.d file written in org-mode. I'm taking this as
a practice for literate programming.

* Enviroment

** Load path

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp")
(add-to-list 'load-path "~/.emacs.d/site-lisp/use-package")
(add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

** Load custom file

A lot of customizations can be made using Emacs's customize interface.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-custom.el")
(load custom-file)
#+END_SRC

** Remap M-x

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC

* Package management

** Use ELPA

#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC

** Add package repositories

Add basic package archives.

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

Windows version of Emacs has problem with built-in gnutls, causing
issue connecting to Maramlaba Repos. We will use melpa as main
source. On other systems we will use Maramlaba and melpa-stable
instead.

#+BEGIN_SRC emacs-lisp
(if (string-equal system-type "windows-nt")
      (add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
  (progn
    (add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)))
#+END_SRC

Initialize packages.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Utilities

** diminish

Hide unnecessary mode names in mode line.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure diminish)
#+END_SRC

** htmlize

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure htmlize)
#+END_SRC

* Editing

** Key mapping

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-w" 'backward-kill-word)
#+END_SRC

* Shell

** eshell

*** Start eshell for buffer

#+BEGIN_SRC emacs-lisp
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-!") 'eshell-here)
#+END_SRC

Close eshell with "x".

#+BEGIN_SRC emacs-lisp
(defun eshell/x ()
  (insert "exit")
  (eshell-send-input)
  (delete-window))
#+END_SRC

* Version Control

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure magit)
#+END_SRC

* Modes

** org

*** org-redmine

Load RedMine tasks into org-mode.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-redmine
  :mode ("\\.org\\'" . org-mode)
  :commands (org-agenda org-agenda-list org-mode)
  :bind ("<f12>" . org-agenda)
  :config (progn
            (load "init-org")
            (load "test-org")
            (setq org-redmine-uri "http://hfhsroweb04:3000/")))
#+END_SRC

** mediawiki

#+BEGIN_SRC emacs-lisp
(use-package mediawiki
  :ensure mediawiki)
#+END_SRC

** Haskell-mode

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure haskell-mode
  :config
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))
#+END_SRC

** PlantUML

#+BEGIN_SRC emacs-lisp
;; (use-package puml-mode
;;   :ensure puml-mode)
#+END_SRC

** ace-jump-mode

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind ("C-." . ace-jump-mode))
#+END_SRC

** ledger-mode

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :ensure t
  :mode ("\\.ledger\\'" . ledger-mode))
#+END_SRC

* Setup theme

** Theme

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure solarized-theme
  :init
  (load-theme 'tango-dark t))
#+END_SRC

** smart-mode-line

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init (sml/setup))
#+END_SRC
