#+Title: Emacs Init.d Written in org-mode
#+Author: Zhen Sun
#+STARTUP: hidestars
#+STARTUP: indent

* The Beginning

This is my emacs's init.d file written in org-mode. I'm taking this as
a practice to literate programming.

* Load path

#+BEGIN_SRC emacs-lisp
  (unless noninteractive
    (message "Loading %s..." load-file-name))
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/use-package")
#+END_SRC
* Package management

** Use ELPA

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

** On-demand installation of packages

#+BEGIN_SRC emacs-lisp
  (defun require-package (package &optional min-version no-refresh)
    "Ask elpa to install given PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (package-install package)
        (progn
          (package-refresh-contents)
          (require-package package min-version t)))))
#+END_SRC

** Add package repositories

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("melpa" . "http://melpa.milkbox.net/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
  (package-initialize)
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

* Editing

** Evil Mode

*** Use customized "escape" key

Define a function to use "jk" to as escape.

#+BEGIN_SRC emacs-lisp
  (defun customize-evil-escape()
    (progn
      (define-key evil-insert-state-map "j" #'cofi/maybe-exit)
      (evil-define-command cofi/maybe-exit ()
        :repeat change
        (interactive)
        (let ((modified (buffer-modified-p)))
          (insert "j")
          (let ((evt (read-event (format "Insert %c to exit insert state" ?k)
                     nil 0.5)))
            (cond
             ((null evt) (message ""))
             ((and (integerp evt) (char-equal evt ?k))
          (delete-char -1)
          (set-buffer-modified-p modified)
          (push 'escape unread-command-events))
             (t (setq unread-command-events (append unread-command-events
                                (list evt))))))))))
#+END_SRC

*** evil 

#+BEGIN_QUOTE
Emacs is a great operating system, lacking only a decent editor.
#+END_QUOTE

Enable Vim's modal editing in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure evil
    :init (evil-mode 1)
    :config
    (progn
      (customize-evil-escape)
      (setq evil-emacs-state-cursor '("red" box))
      (setq evil-normal-state-cursor '("green" box))
      (setq evil-visual-state-cursor '("orange" box))
      (setq evil-insert-state-cursor '("red" bar))
      (setq evil-replace-state-cursor '("red" bar))
      (setq evil-operator-state-cursor '("red" hollow))))
#+END_SRC
*** Leader key

#+BEGIN_SRC emacs-lisp
  (require-package 'evil-leader)
  (setq evil-leader/in-all-states 1)
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
#+END_SRC

*** evil-org

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure evil-org
    :mode ("\\.org\\'" . org-mode))
#+END_SRC

* Version Control

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure magit
    :diminish magit-auto-revert-mode
    :bind ("C-x g" . magit-status))
#+END_SRC

* Setup theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure zenburn-theme
    :init
    (load-theme 'zenburn t))
#+END_SRC
