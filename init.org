#+Title: Emacs Init.d Written in org-mode
#+Author: Zhen Sun
#+STARTUP: hidestars
#+STARTUP: indent

* The Beginning

This is my emacs's init.d file written in org-mode. I'm taking this as
a practice for literate programming.

* Enviroment
** Recentf
#+BEGIN_SRC emacs-lisp
(when (require 'recentf nil t)
  (setq recentf-max-saved-items 10000)
  ;; (setq recentf-auto-cleanup '10)
  ;; (setq recentf-auto-save-timer
  ;;       (run-with-idle-timer 30 t 'recentf-save-list))
  ;; (setq recentf-exclude '("~/.recentf"))
  (recentf-mode 1))
#+END_SRC
** Paths
*** Load path

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp")
(add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

** Package management
*** Use ELPA

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
#+END_SRC

*** Add package repositories

Add basic package archives.

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

Windows version of Emacs has problem with built-in gnutls, causing
issue connecting to Maramlaba Repos. We will use melpa as main
source. On other systems we will use Maramlaba and melpa-stable
instead.

#+BEGIN_SRC emacs-lisp
(if (string-equal system-type "windows-nt")
      (add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/"))
  (progn
    (add-to-list 'package-archives
             '("melpa" . "http://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)))
#+END_SRC

Initialize packages.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

*** use-package

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC
** Load custom file

A lot of customizations can be made using Emacs's customize interface.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-custom.el")
(load custom-file)
#+END_SRC

Use init-split to manage settings

#+BEGIN_SRC emacs-lisp
  (use-package initsplit
    :ensure t)
#+END_SRC

** Remap M-x

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC
** Garbage collection setting

Copied settings from [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Why are you changing gc-cons-threshold?]]

#+BEGIN_SRC emacs-lisp
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+END_SRC

* Utilities
** Popup
#+BEGIN_SRC emacs-lisp
(use-package popup
:ensure t)
#+END_SRC
** winner-mode

Undo window layout changes.

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** diminish

Hide unnecessary mode names in mode line.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC

** htmlize

D
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC

** swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config (progn
            (ivy-mode 1)
            (setq ivy-use-virtual-buffers t)
            (setq magit-completing-read-function 'ivy-completing-read))
  :bind (("C-s" . swiper)
         ("C-c u" . swiper-all)
         ("C-x C-f" . counsel-find-file)
         ("C-c C-r" . ivy-resume)))

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)))
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t)
#+END_SRC

*** Rectango editing

#+BEGIN_SRC emacs-lisp
(defun ora-ex-point-mark ()
  (interactive)
  (if rectangle-mark-mode
      (exchange-point-and-mark)
    (let ((mk (mark)))
      (rectangle-mark-mode 1)
      (goto-char mk))))

(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                           :color pink
                           :post (deactivate-mark))
  "
  ^_k_^     _d_elete    _s_tring     |\\     ‗,,,--,,‗
_h_   _l_   _o_k        _y_ank       /,`.-'`'   .‗  \-;;,‗
  ^_j_^     _n_ew-copy  _r_eset     |,4-  ) )‗   .;.(  `'-'
^^^^        _e_xchange  _u_ndo     '---''(‗/.‗)-'(‗\‗)
^^^^        ^ ^         _p_aste
"
  ("h" backward-char nil)
  ("l" forward-char nil)
  ("k" previous-line nil)
  ("j" next-line nil)
  ("e" ora-ex-point-mark nil)
  ("n" copy-rectangle-as-kill nil)
  ("d" delete-rectangle nil)
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)) nil)
  ("y" yank-rectangle nil)
  ("u" undo nil)
  ("s" string-rectangle nil)
  ("p" kill-rectangle nil)
  ("o" nil nil))

(global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)

#+END_SRC

* Editing
** Turn on auto-fill-mode for text-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Key mapping

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
#+END_SRC

** expand-region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

** multiple-cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC

** ace-jump-mode

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind ("C-." . ace-jump-mode))
#+END_SRC
** Show lines and charactors when marked
#+BEGIN_SRC emacs-lisp
(defun count-lines-and-chars ()
  (if mark-active
      (format "[%3d lines, %4d chars]"
              (count-lines (region-beginning) (region-end))
              (- (region-end) (region-beginning)))
    ""))
(add-to-list 'default-mode-line-format
             '(:eval (count-lines-and-chars)))
#+END_SRC
* Shell

** eshell

*** Start eshell for buffer

#+BEGIN_SRC emacs-lisp
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-!") 'eshell-here)
#+END_SRC

Close eshell with "x".

#+BEGIN_SRC emacs-lisp
(defun eshell/x ()
  (insert "exit")
  (eshell-send-input)
  (delete-window))
#+END_SRC

* Version Control

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure magit
  :bind ("C-x g" . magit-status))
#+END_SRC

** rbt

rbt is the command line tool for ReviewBoard

#+BEGIN_SRC emacs-lisp
(use-package rbt
  :ensure t)
#+END_SRC
* Setup theme

** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'misterioso t)
#+END_SRC
** smart-mode-line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
 :config (sml/setup))
#+END_SRC
** Chinese font size
#+BEGIN_SRC emacs-lisp
(use-package chinese-fonts-setup
  :ensure t
  :config
    (chinese-fonts-setup-enable))
#+END_SRC
* Modes

** org

*** org-mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org\\'" . org-mode)
  :commands (org-agenda org-agenda-list org-mode)
  :bind ("<f12>" . org-agenda)
  :config (progn
            (load "init-org")
            (load "test-org")
            (add-hook 'org-agenda-mode-hook
                      'hl-line-mode)
  ))
#+END_SRC

*** org-redmine

Load RedMine tasks into org-mode.

#+BEGIN_SRC emacs-lisp
(use-package org-redmine
  :ensure org-redmine
  :mode ("\\.org\\'" . org-mode)
  :config (setq org-redmine-uri "http://hfhsroweb04:3000/"))
#+END_SRC

*** org-outlook

Load org-outlook

#+BEGIN_SRC emacs-lisp
(use-package org-outlook)
#+END_SRC
** mediawiki

#+BEGIN_SRC emacs-lisp
(use-package mediawiki
  :ensure mediawiki)
#+END_SRC

** Haskell-mode

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure haskell-mode
  :config
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))
#+END_SRC

** PlantUML

#+BEGIN_SRC emacs-lisp
;; (use-package puml-mode
;;   :ensure puml-mode)
#+END_SRC

** ledger-mode

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :ensure 
  :mode ("\\.ledger\\'" . ledger-mode))
#+END_SRC

** C#

#+BEGIN_SRC emacs-lisp
(use-package csharp-mode
  :ensure t
  :mode ("\\.cs\\'" . csharp-mode))
#+END_SRC

** Powershell
#+BEGIN_SRC emacs-lisp
(use-package powershell
  :ensure t)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(use-package pyvenv :ensure t :defer t)
(use-package elpy
  :ensure t
  :defer t
  :config
  (progn
    (elpy-enable)))
#+END_SRC
