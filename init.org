#+Title: Emacs Init.d Written in org-mode
#+Author: Zhen Sun
#+STARTUP: hidestars
#+STARTUP: indent

* The Beginning

This is my emacs's init.d file written in org-mode. I'm taking this as
a practice for literate programming.

* Enviroment

** Load path

#+BEGIN_SRC emacs-lisp
  (unless noninteractive
    (message "Loading %s..." load-file-name))
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/use-package")
  (add-to-list 'load-path "~/.emacs.d/lisp")

#+END_SRC

** Load custom file

A lot of customizations can be made using Emacs's customize interface.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)
#+END_SRC

** Remap M-x

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-m" 'execute-extended-command)
  (global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC

* Package management

** Use ELPA

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

** Add package repositories

Add basic package archives.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

Windows version of Emacs has problem with built-in gnutls, causing
issue connecting to Maramlaba Repos. We will use melpa as main
source. On other systems we will use Maramlaba and melpa-stable
instead.

#+BEGIN_SRC emacs-lisp
  (if (string-equal system-type "windows-nt")
        (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
    (progn
        (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
      (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)))
#+END_SRC

Initialize packages.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

* Utilities

** diminish

Hide unnecessary mode names in mode line.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure diminish)
#+END_SRC

** htmlize

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure htmlize)
#+END_SRC

* Editing

** Evil Mode

#+BEGIN_QUOTE
Emacs is a great operating system, lacking only a decent editor.
#+END_QUOTE

*** Use customized "escape" key

Define a function to use "jk" to as escape.

#+BEGIN_SRC emacs-lisp
  (defun customize-evil-escape()
    (progn
      (define-key evil-insert-state-map "j" #'cofi/maybe-exit)
      (evil-define-command cofi/maybe-exit ()
        :repeat change
        (interactive)
        (let ((modified (buffer-modified-p)))
          (insert "j")
          (let ((evt (read-event (format "Insert %c to exit insert state" ?k)
                     nil 0.5)))
            (cond
             ((null evt) (message ""))
             ((and (integerp evt) (char-equal evt ?k))
          (delete-char -1)
          (set-buffer-modified-p modified)
          (push 'escape unread-command-events))
             (t (setq unread-command-events (append unread-command-events
                                (list evt))))))))))
#+END_SRC

*** evil 

Enable Vim's modal editing in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure evil
    :init (evil-mode 1)
    :config
    (progn
      (customize-evil-escape)
      (setq evil-emacs-state-cursor '("red" box))
      (setq evil-normal-state-cursor '("green" box))
      (setq evil-visual-state-cursor '("orange" box))
      (setq evil-insert-state-cursor '("red" bar))
      (setq evil-replace-state-cursor '("red" bar))
      (setq evil-operator-state-cursor '("red" hollow))))
#+END_SRC

*** Leader key

#+BEGIN_SRC emacs-lisp
    (use-package evil-leader
      :ensure evil-leader
      :init
        (global-evil-leader-mode)
      :config
      (progn
        (evil-leader/set-leader ",")
        (evil-leader/set-key
          "e" 'find-file
          "b" 'switch-to-buffer
          "k" 'kill-buffer
          "!" 'eshell-here)))
#+END_SRC

*** evil-org

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure evil-org
    :mode ("\\.org\\'" . org-mode)
    :diminish evil-org-mode)
#+END_SRC

** Relative Line Number

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure linum-relative
    :init (global-linum-mode)
    )
#+END_SRC

* Shell

** eshell

*** Start eshell for buffer

#+BEGIN_SRC emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "C-!") 'eshell-here)
#+END_SRC

Close eshell with "x".

#+BEGIN_SRC emacs-lisp
  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+END_SRC

* Version Control

** Magit

#+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure magit
      :diminish magit-auto-revert-mode
      :config
      (evil-leader/set-key
        "g" 'magit-status))
#+END_SRC

* Modes

** org

*** org-redmine

#+BEGIN_SRC emacs-lisp
  (use-package org-redmine
    :mode ("\\.org\\'" . org-mode)
    :commands (org-agenda org-agenda-list org-mode)
    :bind ("<f12>" . org-agenda)
    :config (progn
              (load "test-org")
              (setq org-redmine-uri "http://hfhsroweb04:3000/")))
#+END_SRC

* Setup theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure zenburn-theme
    :init
    (load-theme 'zenburn t))
#+END_SRC
